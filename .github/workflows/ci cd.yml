# Название вашего пайплайна
name: Automate Version and Push to Docker

#Триггер на события, которые производятся по пушу или мерджу 
# on:
#   push:
#     branches: [ "master", "develop" ]
on:
  workflow_dispatch:
  pull_request:
    # На какие типы событий он должен работать
    #types: [opened, synchronize, reopened, closed, assigned, unassigned, labeled, unlabeled, edited]
    types: [closed]
    branches:
      - release
        
env:
  NAME_VERSION_FILE: ${{ github.workspace }}/version
  RELEASE_BRACH: release
  MINOR: minor
  PATCH: patch
  VERSION_UP: .github/workflows/version_up.py
  REPO_NAME: ${{ github.event.repository.name }}
  PR_NUMBER: ${{ github.event.number }}
  URL_REPO: ${{ github.server_url }}/${{ github.repository }}
  CONTAINER_NAME: land_devops
  CHANGELOG_FILE: changelog.md

#JOBS list for update versions 
jobs:
  pre-merge-check:
    name: (INF) Print INFORMATIOn
    runs-on: ubuntu-latest
    steps:
      
      # use special lib for parse branch names 
      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8
      
      # print info about variables and parsed branches
      - name: Print info
        id: print-info
        run: |
          echo "EVENT NAME    : ${{ github.event_name }}"
          echo "ACTION        : ${{ github.event.action }}"
          echo "EVENT NAME    : ${{ github.event_name }}"
          echo "IS            : ${{ github.event.pull_request.merged }}"
          echo "CURRENT BRANCH: ${{ steps.branch-names.outputs.current_branch }}"
          echo "REF           : ${{ github.ref }}"
          echo "REF NAME      : ${{ github.ref_name }}"
          echo "DEFAULT BRANCH: ${{ steps.branch-names.outputs.default_branch }}"
          echo "WOKSPACE      : ${{ github.workspace }} "
          echo "WOKSPACE      : ${{ github.workspace }} "
  
  # antivirus scanning
  security: 
    name: (SEC)
    needs: pre-merge-check
    uses: LevMikahylov/react/.github/workflows/sec.yml@release # attention @branch-name is recomnneded

    # create changelog file and put data to file 
  tests:
    name: (TST)
    needs: security
    uses: LevMikahylov/react/.github/workflows/test.yml@release
    with: 
      version: alpha

  # start update version files       
  update-version:
    name: (VER) Version UP
    needs: tests
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      tag: ${{steps.get-commit-txt.outputs.TAG_MSG}}
    steps:      

      # use special lib for parse branch names 
      - name: Get branch names
        id: branch-names
        uses: tj-actions/branch-names@v8

      # checkout on branch 
      - name: Сheckout on [${{env.RELEASE_BRACH}}]
        uses: actions/checkout@v2
      
      # promt path to version file 
      - name: Promt catalog's info
        run : |
          echo "path to version file ${{ env.NAME_VERSION_FILE }}"
          
      # Setup python env 
      - name: Install and Setup python 
        uses: actions/setup-python@v1
        with:
          python-version: "3.10"
    
      # update version if branch start with feature
      - name: Update version [minor]
        if: startsWith(steps.branch-names.outputs.current_branch,'feature')
        run: 
          python ${{env.VERSION_UP}} ${{ env.NAME_VERSION_FILE }} ${{ env.MINOR }}
 
      # update version if bracnh start with feature
      - name: Update version [patch]
        if: startsWith(steps.branch-names.outputs.current_branch,'hotfix')
        run:
          python ${{env.VERSION_UP}} ${{ env.NAME_VERSION_FILE }} ${{ env.PATCH }}
      
      # generate variables for commit and tag 
      - name: Save Version and Log to env
        id: get-commit-txt
        run: | 
          COMMIT_MSG=$(python ${{env.VERSION_UP}} ${{ env.NAME_VERSION_FILE }} version_log -1)
          TAG_MSG=$(python ${{env.VERSION_UP}} ${{ env.NAME_VERSION_FILE }} version)
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
          echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_ENV
          echo "TAG_MSG=${TAG_MSG}" >> $GITHUB_OUTPUT
      
      # setup user which will be commit
      # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      # add and push to remote repository 
      - name: Update [version] and put [tag]
        run: |
          git add .
          git commit -m "${{ env.COMMIT_MSG }}"
          git tag -a v${{ env.TAG_MSG }} -m "update tag"
          git push -u origin ${{ env.RELEASE_BRACH }} --tags 
  
  # create changelog file and put data to file 
  changelog:
    name: (VER) Chagelog UP
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
    runs-on: ubuntu-latest
    needs: update-version
    steps:  
      # checkout on branch 
      - name: Сheckout on [${{env.RELEASE_BRACH}}]
        uses: actions/checkout@v2

      - name: update release
        run: |
          git pull
      
      - name: Update changelog.md
        run: | 
          echo "---" >> ${{env.CHANGELOG_FILE}} 
          echo "#### [${{needs.update-version.outputs.tag}}] - $(date +"%Y.%m.%d")    ${{ github.event.pull_request.head.ref }}" >> ${{env.CHANGELOG_FILE}} 
      
      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      
       # add and push to remote repository 
      - name: Commit
        run: |
          git add .
          git commit -m "[${{needs.update-version.outputs.tag}}] ${{env.CHAGELOG_FILE}}"
          git push -u origin ${{ env.RELEASE_BRACH }} --tags 

      # upload changelog to artifact
      - uses: actions/upload-artifact@v4
        with:
          name: ${{env.CHANGELOG_FILE}}
          path: ${{env.CHANGELOG_FILE}}

      # append comment to PR
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '${{env.CHANGELOG_FILE}} был обновлен. Новая версия доступна в корне репозитория.'
            })
      # add label to PR 
      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['changelog-${{needs.update-version.outputs.tag}}']
            })


  # create changelog file and put data to file 
  build:
    name: (BUILD)
    needs: changelog
    uses: LevMikahylov/react/.github/workflows/build.yml@release
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write

  # build docker image and push to registry
  docker-push:
    name: (CI) Docker push
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
    runs-on: ubuntu-latest
    needs: [build,update-version]
    env: 
      tag: ${{needs.update-version.outputs.tag}}
    steps:
      - name: Prepare env 
        run: | 
          echo "show variables"
          echo [${{env.tag}}]
      # checkout on branch 
      - name: Сheckout on [${{env.RELEASE_BRACH}}] and v [${{env.tag}}]
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_HUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_LOGIN }}/${{env.REPO_NAME}}:v${{env.tag}}

      # update info about docker Readme file and description
      - name: Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_HUB_LOGIN }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
          repository: ${{ secrets.DOCKER_HUB_LOGIN }}/${{env.CONTAINER_NAME}}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: LevMikahylov/react/README.md
          enable-url-completion: true
      
      # add label to PR 
      - uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dockerhub','${{env.tag}}']
            })
  
